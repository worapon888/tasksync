// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  password     String
  image        String?
  tasks        Task[]         @relation("UserTasks")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Account      Account[]
  Session      Session[]
  EnergyRecord EnergyRecord[]
  UserSetting  UserSetting?
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  cover       String?

  userId String
  user   User   @relation("UserTasks", fields: [userId], references: [id])

  mode      TaskMode     @default(PersonalAssistant)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  status    TaskStatus   @default(TODO)
  priority  TaskPriority @default(medium)
}

enum TaskStatus {
  TODO
  DOING
  REVIEW
  DONE
}

enum TaskPriority {
  low
  medium
  high
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TaskMode {
  PersonalAssistant
  CareerTransition
  FinancialPlanner
  BusinessLaunchpad
  SocialGrowth
  PersonalDevelopment
  HealthJourney
  LeisureBalance
  MindfulLiving
}

enum EnergyLevel {
  HIGH
  MEDIUM
  LOW
}

model EnergyRecord {
  id          String      @id @default(cuid())
  userId      String
  day         Int
  month       Int
  year        Int
  energyLevel EnergyLevel
  value       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, day, month, year], name: "userId_day_month_year")
}

model UserSetting {
  id                   String  @id @default(cuid())
  userId               String  @unique
  defaultView          String  @default("weekly")
  showEmotionalStatus  Boolean @default(true)
  taskReminders        Boolean @default(true)
  emotionalSuggestions Boolean @default(true)

  user User @relation(fields: [userId], references: [id])
}
