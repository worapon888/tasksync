// app/api/delete-account/route.ts
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma"; // ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì
import { getServerSession } from "next-auth";
import { authOptions } from "../auth/[...nextauth]/route"; // ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

export async function DELETE() {
  const session = await getServerSession(authOptions);

  if (!session?.user?.id) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const userId = session.user.id;

  try {
    // üî• ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö user ‡∏Å‡πà‡∏≠‡∏ô
    await prisma.task.deleteMany({ where: { userId } });
    await prisma.account.deleteMany({ where: { userId } });
    await prisma.session.deleteMany({ where: { userId } });
    await prisma.energyRecord.deleteMany({ where: { userId } });
    await prisma.userSetting.deleteMany({ where: { userId } });

    // ‚úÖ ‡∏•‡∏ö user ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    await prisma.user.delete({ where: { id: userId } });

    return NextResponse.json({ message: "Account deleted" });
  } catch (error) {
    console.error("‚ùå Failed to delete account:", error);
    return NextResponse.json(
      { error: "Failed to delete account" },
      { status: 500 }
    );
  }
}
